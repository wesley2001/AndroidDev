package com.libary;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.FloatBuffer;

import android.opengl.GLES20;
import android.util.Log;

public class Triangle {
	private final String vertexShaderCode =
		    "attribute vec4 vPosition;" +
		    "void main() {" +
		    "  gl_Position = vPosition;" +
		    "}";
	
	private final String fragmentShaderCode =
	    "precision mediump float;" +
	    "uniform vec4 vColor;" +
	    "void main() {" +
	    "  gl_FragColor = vColor;" +
	    "}";

    // number of coordinates per vertex in this array
    static final int COORDS_PER_VERTEX = 3;
    static float triangleCoords[] = { // in counterclockwise order:
         0.0f,  0.622008459f, 0.0f,   // top
        -0.5f, -0.311004243f, 0.0f,   // bottom left
         0.5f, -0.311004243f, 0.0f    // bottom right
    };
    
	private FloatBuffer vertexBuffer;
	private int mProgram;
	private int mPositionHandle;
	private int vertexStride;
	private int mColorHandle;
	private int vertexCount = 3;

    // Set color with red, green, blue and alpha (opacity) values
    float color[] = { 0.6f, 0.7f, 0.2f, 1.0f };

    public Triangle() {
        // initialize vertex byte buffer for shape coordinates
        ByteBuffer bb = ByteBuffer.allocateDirect(
                // (number of coordinate values * 4 bytes per float)
                triangleCoords.length * 4);
        // use the device hardware's native byte order
        bb.order(ByteOrder.nativeOrder());

        // create a floating point buffer from the ByteBuffer
        this.vertexBuffer = bb.asFloatBuffer();
        // add the coordinates to the FloatBuffer
        this.vertexBuffer.put(triangleCoords);
        // set the buffer to read the first coordinate
        this.vertexBuffer.position(0);
        
        // shaders must be added for showing a triangle
        
        int vertexShader = MyRenderer.loadShader(GLES20.GL_VERTEX_SHADER, this.vertexShaderCode);
        int fragmentShader = MyRenderer.loadShader(GLES20.GL_FRAGMENT_SHADER, this.fragmentShaderCode);
    
        this.mProgram = GLES20.glCreateProgram();      // create empty OpenGL ES Program
        GLES20.glAttachShader(this.mProgram, vertexShader);   // add the vertex shader to program
        GLES20.glAttachShader(this.mProgram, fragmentShader); // add the fragment shader to program
        GLES20.glLinkProgram(this.mProgram);
    }
    
    public void draw(float[] mvpMatrix) {
        // Add program to OpenGL ES environment
        GLES20.glUseProgram(this.mProgram);
        
        // get handle to vertex shader's vPosition member
        this.mPositionHandle = GLES20.glGetAttribLocation(this.mProgram, "vPosition");

        // Enable a handle to the triangle vertices
        GLES20.glEnableVertexAttribArray(this.mPositionHandle);

        // Prepare the triangle coordinate data
        GLES20.glVertexAttribPointer(this.mPositionHandle, this.COORDS_PER_VERTEX,
                                     GLES20.GL_FLOAT, false,
                                     this.vertexStride, this.vertexBuffer);

        // get handle to fragment shader's vColor member
        this.mColorHandle = GLES20.glGetUniformLocation(this.mProgram, "vColor");

        // Set color for drawing the triangle
        GLES20.glUniform4fv(this.mColorHandle, 1, color, 0);

        // get handle to shape's transformation matrix
        int mMVPMatrixHandle = GLES20.glGetUniformLocation(mProgram, "mvpMatrix");

        // Apply the projection and view transformation
        GLES20.glUniformMatrix4fv(mMVPMatrixHandle, 1, false, mvpMatrix, 0);

        // Draw the triangle
        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, vertexCount);

        // Disable vertex array
        GLES20.glDisableVertexAttribArray(this.mPositionHandle);
        
    }
}
