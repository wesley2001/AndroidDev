package com.libary;

import javax.microedition.khronos.egl.EGLConfig;
import javax.microedition.khronos.opengles.GL10;

import android.opengl.GLES20;
import android.opengl.GLSurfaceView;
import android.opengl.Matrix;
import android.os.SystemClock;

public class MyRenderer implements GLSurfaceView.Renderer {	
	private static final String TAG = "MyGLRenderer";
	
	Triangle myTriangle;
	
	// matrices
	private float[] mMVPMatrix = new float[16];	
	private float[] mRotationMatrix = new float[16];
	
	private MyCamera camera = null;
	private MyProjection projection = null;

	private float[] clearColor = null;
	
	public MyRenderer() {
		this.camera = new MyCamera();
		this.projection = new MyProjection();
		this.clearColor = new float[] {0.0f, 0.0f, 1.0f, 1.0f};
	}
	
	@Override
	public void onSurfaceCreated(GL10 unused, EGLConfig config) {
		this.myTriangle = new Triangle();
		GLES20.glClearColor(this.clearColor[0], this.clearColor[1], this.clearColor[2], this.clearColor[3]);
	}
	
	@Override
	public void onDrawFrame(GL10 gl) {
		// clear color by buffer
        GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT);
        
       
        // Create a rotation transformation for the triangle
        long time = SystemClock.uptimeMillis() % 4000L;
        float angle = 0.090f * ((int) time);
        
        //Matrix.setRotateM(mRotationMatrix, 0, angle, 1.0f, 1.0f, 1.0f); 
        
       // Matrix.multiplyMM(mMVPMatrix, 0, mRotationMatrix, 0, mMVPMatrix, 0);
        
        // Draw shape
        this.myTriangle.draw(mMVPMatrix);
	}

	@Override
	public void onSurfaceChanged(GL10 unused, int width, int height) {
	    GLES20.glViewport(0, 0, width, height);
	    
	    this.projection.calculateRatio(width, height);
	}

	private void calculateMatrix() {
		 Matrix.multiplyMM(mMVPMatrix, 0, this.projection.mProjMatrix, 0, this.camera.mVMatrix, 0);

	}
	
	
	// static helper method for loading a shader.
	public static int loadShader(int type, String shaderCode){
	    // create a vertex shader type (GLES20.GL_VERTEX_SHADER)
	    // or a fragment shader type (GLES20.GL_FRAGMENT_SHADER)
	    int shader = GLES20.glCreateShader(type);

	    // add the source code to the shader and compile it
	    GLES20.glShaderSource(shader, shaderCode);
	    GLES20.glCompileShader(shader);

	    return shader;
	}
}
